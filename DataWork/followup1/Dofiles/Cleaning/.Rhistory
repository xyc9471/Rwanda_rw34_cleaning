library(haven)
modB_B1_long <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
View(modB_B1_long)
names(modB_B1_long)
library(haven)
modB_long <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_long.dta")
View(modB_long)
library(haven)
modB1_long <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB1_long.dta")
View(modB1_long)
names(modB_long)
# delete empty rows
modbb1 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
modbb1 <- modbb1[!(b1hh_14a == "NA" & hh_roster_index == "NA"),]
modbb1 <- modbb1[!(modbb1$b1hh_14a == "NA" & modbb1$hh_roster_index == "NA"),]
modbb1 <- modbb1[!(modbb1$b1hh_14a == NA & modbb1$hh_roster_index == NA),]
is.na(modbb1$b1hh_14)
is.na(modbb1$b1hh_14a)
!is.na(modbb1$b1hh_14a)
is.na(modbb1$b1hh_14a)
is.na(modbb1$hh_15)
modbb1 <- as.data.frame(modbb1)
is.na(modbb1$hh_15)
modbb1 <- as.numeric(modbb1)
modbb1 <- as.numeric(modbb1$b1hh_14a)
is.na(modbb1$age)
sum(modbb1$age)
# delete empty rows
modbb1 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
modbb1 <- as.data.frame(modbb1)
sum(modbb1$age)
is.na(modbb1$age)
modbb1 <- modbb1[!(modbb1$b1hh_14a == NA & modbb1$hh_roster_index == NA),]
modbb1 <- modbb1[!(modbb1$b1hh_14a == "" & modbb1$hh_roster_index == ""),]
modbb <- modbb1[!(modbb1$b1hh_14a == ""),]
modbb <- modbb1[!(modbb1$b1hh_14a == NA),]
modbb <- modbb1[!(modbb1$b1hh_14a == 1),]
dim(modbb1$b1hh_14a)
View(modbb1)
# delete empty rows
modbb1 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
modbb1 <- as.data.frame(modbb1)
View(modbb1)
modbb <- modbb1[!(modbb1$b1hh_14a == ""),]
View(modbb)
modbb <- modbb1[!(modbb1$b1hh_14a == "" & modbb1$hh_roster_index == ""),]
View(modbb)
View(modB_B1_long)
rm(list=lm())
rm(list=ls())
projectFolder     <- file.path("C:/Users/WB546716/Documents/GitHub/Rwanda_rw34_cleaning")
dataWorkFolder    <- file.path(projectFolder, "DataWork")
followupFolder    <- file.path(dataWorkFolder, "followup1")
Data              <- file.path(followupFolder, "DataSets")
DeidentifiedData  <- file.path(Data, "Deidentified")
InterData         <- file.path(Data, "Intermediate")
library(haven)
fup1_rw34_incoming_data_toclean <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Deidentified/fup1_rw34_incoming_data_toclean.dta")
View(fup1_rw34_incoming_data_toclean)
packages <- c("haven",
"sjmisc",
"stringr",
"reshape",
"reshape2",
"data.table",
"gtools",
"dplyr")
sapply(packages, function(x) {
print(x)
if (x %in% installed.packages() == FALSE) {
install.packages(x, dependencies = TRUE)
}
library(x,
character.only = T)
}
)
hh_rw34 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Deidentified/fup1_rw34_incoming_data_toclean.dta")
which(colnames(hh_rw34)=="pl_hhmembnumber") # 32, starting point of module B
which(colnames(hh_rw34)=="old_membpresent") # 1031, ending point of module B
hh_rw <- hh_rw34[c(7,32:1031)] # keeping only id_05 and mod_b
find_var(hh_rw, "v") # check for variables with the wrong names (starting with letter "v")
df <- hh_rw[names(hh_rw)[substr(names(hh_rw),1,1) == "v"]] # subset the variables with the wrong names
for (var in hh_rw[names(hh_rw)[substr(names(hh_rw),1,1) == "v"]]) {
label <- str_replace(attr(var,"label"), "HH", "hh") # the right names are stored in attibutes
list <- append(list, label) # extract the attribute labels in a list, then convert all HH to hh
}
list <- list[-1] # deleting the funtion element
names(hh_rw)[substr(names(hh_rw),1,1) == "v"] <- as.character(list) # replace the old names with the correct names
# double check if we successfully corrected variable names
names(hh_rw)[substr(names(hh_rw),1,1) == "v"] # double check: character(0) means all names replaced
names(hh_rw)[substr(names(hh_rw),1,1) == "H"] # double check: character(0) means HH is changed to hh
duplicated(hh_rw) # returns 0 duplicated columns
duplicated(hh_rw$id_05) # returns 2 duplicated rows in id_05
n_occur <- data.frame(table(hh_rw$id_05))
n_occur[n_occur$Freq > 1,] # locate the dups
hh_rw <- hh_rw[!duplicated(hh_rw$id_05),]
hhrw=hh_rw[4:1001] # subset anything else EXCEPT id_05 and variables DO NOT needed to be reshaped
hhrw_ordered <- hhrw[,mixedsort(colnames(hhrw))] # sort variables needed to be reshaped in alphabetical and ascending order
hhrw_ordered=cbind(hh_rw[1:3],hhrw_ordered) # combine the sorted table with id_05 and variables DO NOT needed to be reshaped
# Step 1: deleting the last integer indicating the family member, left with, for example, hh_07_ or hh_07
colnames(hhrw_ordered)[4:1001] = substr(colnames(hhrw_ordered)[4:1001], 1,
nchar(colnames(hhrw_ordered)[4:1001])-2)
for (i in 1:1001) {
x=colnames(hhrw_ordered)[i]
if (substring(x,nchar(x))=="_") {
colnames(hhrw_ordered)[i] = substr(colnames(hhrw_ordered)[i], 1,
nchar(colnames(hhrw_ordered)[i])-1)
}
} # returns variable names as dups of hh_07 / age / etc....
# Step 3: extracting all names into a list
varnames = colnames(hhrw_ordered) # extracting the names into a list
varnames <- varnames[duplicated(varnames)] # keeps the vars needed to be reshaped
varnames <- varnames[!duplicated(varnames)] # removes all dups, which left with each group name
subdf=hhrw_ordered[,which(colnames(hhrw_ordered)==varnames[1])]
subdf=cbind(hhrw_ordered[,1],subdf)
colnames(subdf)[1]="id_05"
colnames(subdf)[2:length(colnames(subdf))]=1:(length(colnames(subdf))-1)
modB_long <- reshape(data = subdf,
idvar = "id_05",
varying = list(c(2:length(colnames(subdf)))),
direction="long",
v.names = c(varnames[1]),
timevar = "member_id",
sep="_")
for (var in 2:length(varnames)) {   # repeat the steps in PART 3, 1), but this time in a loop
subdf=hhrw_ordered[,which(colnames(hhrw_ordered)==varnames[var])]
subdf=cbind(hhrw_ordered[,1],subdf)
colnames(subdf)[1]="id_05"
colnames(subdf)[2:length(colnames(subdf))]=1:(length(colnames(subdf))-1)
modB_long1 <- reshape(data = subdf,
idvar = "id_05",
varying = list(c(2:length(colnames(subdf)))),
direction="long",
v.names = c(varnames[var]),
timevar = "member_id",
sep="_") # for variables under each group,
# we reshape once, and name it as hhrw_long1
modB_long <- merge(modB_long, modB_long1, by = c("id_05", "member_id"), all = T)
} # then we merge the reshaped data frame to hhrw_long by "id_05" and "member_id"
hhrw_unique <- select(hh_rw34, c("id_05",
"pl_hhmembnumber",
"hh_rosterold_count",
"b1hh_14",
"old_membpresent"))
hhrw_unique <- hhrw_unique[!duplicated(hhrw_unique$id_05),] # delete the id_05 duplicates
modB_long <- merge(modB_long, hhrw_unique, by = c("id_05"), all = T)
modB_long = modB_long[!modB_long$member_id > 12,]
write_dta(modB_long, file.path(InterData, "modB_long.dta"))
write_dta(modB_long, "/Users/orangexx/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_long.dta")
View(modB_long)
which(colnames(hh_rw34)=="b1hh_14a") # 1033, starting point of module B1
which(colnames(hh_rw34)=="hh_15a_check") # 1474, ending point of module B1
hhrw_b1 <- hh_rw34[c(7,1033:1474)] # keeping only id_05 and module B1
df <- hhrw_b1[names(hhrw_b1)[substr(names(hhrw_b1),1,1) == "v"]] # so we know how many names need to be corrected
rm(list) # remove the list used in module b
for (var in hhrw_b1[names(hhrw_b1)[substr(names(hhrw_b1),1,1) == "v"]]) {
label <- str_replace(attr(var,"label"), "B1HH", "b1hh") # the right names are stored in attibutes
list <- append(list, label) # extract the attribute labels in a list, then convert all B to b, HH to hh
}
list <- list[-1] # deleting the funtion element
names(hhrw_b1)[substr(names(hhrw_b1),1,1) == "v"] <- as.character(list) # replace the old names with the correct names
# double check if we successfully corrected variable names
names(hhrw_b1)[substr(names(hhrw_b1),1,1) == "v"] # double check: character(0) means all names replaced
duplicated(hhrw_b1$id_05) # returns 2 duplicated rows in id_05
n_occur <- data.frame(table(hhrw_b1$id_05))
n_occur[n_occur$Freq > 1,] # locate the dups
hhrw_b1 <- hhrw_b1[!duplicated(hhrw_b1$id_05),]
# 1) Sorting the table ---------------------------------------------------------------
hhrwb1=hhrw_b1[4:435] # subset anything else EXCEPT id_05 and variables DO NOT needed to be reshaped
hhrwb1_exp = hhrw_b1[,c(1:3,436:443)] # subset id_05 and variables DO NOT needed to be reshaped
hhrwb1_ordered <- hhrwb1[,mixedsort(colnames(hhrwb1))] # sort variables needed to be reshaped in alphabetical and ascending order
hhrwb1_ordered=cbind(hhrwb1_exp[1:11],hhrwb1_ordered) # combine the sorted table with id_05 and variables DO NOT needed to be reshaped
# Step 1: deleting the last integer indicating the family member, left with, for example, hh_07_ or hh_07
colnames(hhrwb1_ordered)[12:443] = substr(colnames(hhrwb1_ordered)[12:443], 1,
nchar(colnames(hhrwb1_ordered)[12:443])-2)
for (i in 1:443) {
x=colnames(hhrwb1_ordered)[i]
if (substring(x,nchar(x))=="_") {
colnames(hhrwb1_ordered)[i] = substr(colnames(hhrwb1_ordered)[i], 1,
nchar(colnames(hhrwb1_ordered)[i])-1)
}
} # returns variable names as dups of hh_07 / age / etc....
# Step 3: extracting all names into a list
varnames = colnames(hhrwb1_ordered) # extracting the names into a list
varnames <- varnames[duplicated(varnames)] # keeps the vars needed to be reshaped
varnames <- varnames[!duplicated(varnames)] # removes all dups, which left with each group name
subdf=hhrwb1_ordered[,which(colnames(hhrwb1_ordered)==varnames[1])]
subdf=cbind(hhrwb1_ordered[,1],subdf)
colnames(subdf)[1]="id_05"
colnames(subdf)[2:length(colnames(subdf))]=1:(length(colnames(subdf))-1)
modB1_long <- reshape(data = subdf,
idvar = "id_05",
varying = list(c(2:length(colnames(subdf)))),
direction="long",
v.names = c(varnames[1]),
timevar = "member_id",
sep="_")
for (var in 2:length(varnames)) {   # repeat the steps in PART 3, 1), but this time in a loop
subdf=hhrwb1_ordered[,which(colnames(hhrwb1_ordered)==varnames[var])]
subdf=cbind(hhrwb1_ordered[,1],subdf)
colnames(subdf)[1]="id_05"
colnames(subdf)[2:length(colnames(subdf))]=1:(length(colnames(subdf))-1)
modB1_long1 <- reshape(data = subdf,
idvar = "id_05",
varying = list(c(2:length(colnames(subdf)))),
direction="long",
v.names = c(varnames[var]),
timevar = "member_id",
sep="_") # for variables under each group,
# we reshape once, and name it as hhrw_long1
modB1_long <- merge(modB1_long, modB1_long1, by = c("id_05", "member_id"), all = T)
} # then we merge the reshaped data frame to hhrw_long by "id_05" and "member_id"
modB1_long <- merge(modB1_long, hhrwb1_exp, by = c("id_05"), all = T)
modB1_long = modB1_long[!modB1_long$member_id > 12,]
modB1_long <- select(modB1_long, -c(new_age))
write_dta(modB1_long, "/Users/orangexx/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB1_long.dta")
modb <- ("modB_long.dta")
modb <- (modB_long.dta)
modb <- read_dta("/Users/orangexx/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_long.dta")
modb1 <- read_dta("/Users/orangexx/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB1_long.dta")
modb1 <- as.data.frame(modb1)
modb1 = modb1[!is.na(modb1$b1hh_14a),]
modb1 = modb1[!is.na(modb1$b1hh_05), ]
modb <- select(modb, c(id_05, member_id, pl_hhmembnumber))
new_modb1 <- merge(modb1, modb, by.x = c("id_05", "member_id"), all.x = TRUE)
new_modb1$member_id <- as.integer(new_modb1$member_id) # convert it to numeric
new_modb1$pl_hhmembnumber <- as.integer(new_modb1$pl_hhmembnumber)
new_modb1$member_id <- new_modb1$member_id + new_modb1$pl_hhmembnumber
new_modb1 = subset(new_modb1, select = -c(pl_hhmembnumber)) # delete the pl_hhmembnumber
modB_B1_long <- merge(modB_long, new_modb1, by = c("id_05", "member_id"), all.x = TRUE)
View(modB_B1_long)
write_dta(modB_B1_long, "/Users/orangexx/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
rm(list=ls())
gc()
# delete empty rows
modbb1 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
View(modbb1)
modbb1 <- as.data.frame(modbb1)
modbb <- modbb1[!(modbb1$b1hh_14a == "" & modbb1$hh_roster_index == ""),]
View(modbb)
library(haven)
modB1_long <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB1_long.dta")
View(modB1_long)
modbb1 = modb1[!is.na(modb1$b1hh_14a),]
modbb1 = modb1[!is.na(modb1$b1hh_05), ]
modbb1 = modbb1[!is.na(modbb1$b1hh_14a),]
modbb1 = modbb1[!is.na(modbb1$b1hh_05), ]
View(modbb)
modbb[rowSums(is.na(modbb)) != ncol(modbb),]
modbb %>% filter_all(any_vars(!is.na(.)))
modbb %>% filter_all(any_vars(complete.cases(.)))
install.packages("janitor")
library("janitor", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
modbb %>% remove_empty("rows")
modbb <- as.data.frame(modbb)
modbb %>% remove_empty("rows")
modbb <- as.data.table(modbb)
modbb %>% remove_empty("rows")
modbb <- modbb[rowSums(is.na(modbb)) != ncol(modbb), ]
View(modB1_long)
# delete empty rows
modbb1 <- read_dta("~/Documents/GitHub/Rwanda_rw34_cleaning/DataWork/followup1/DataSets/Intermediate/modB_B1_long.dta")
hh_bb1 <- as.data.frame(modbb1)
hh_bb1 <- as.data.table(modbb1)
hh_bb1 <- hh_bb1[!(hh_bb1$b1hh_14a == "" & hh_bb1$hh_roster_index == ""),]
View(hh_bb1)
# Check for skip patterns starting with module b
summary(hh_bb1$hh_13c[hh_bb1$hh_13b == 0], basic = T)
# result:
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# 1.00    1.00    3.00    2.54    4.00    4.00     129  no odd values here
summary(hh_bb1$hh_13c[hh_bb1$hh_13b == 1], basic = T)
# 2. Primary Activity
summary(hh_bb1$hh_10)
# Result:
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#-77.000   1.000   1.000   2.345   1.000  16.000    1569   # -77 indicates other
summary(hh_bb1$hh_10_other[hh_bb1$hh_10 == -77], basic = T)
# Result:
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#-77.000   1.000   1.000   2.345   1.000  16.000    1569   # -77 indicates other
summary(hh_bb1$as.numberic(hh_10_other)[hh_bb1$hh_10 == -77], basic = T)
# Result:
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#-77.000   1.000   1.000   2.345   1.000  16.000    1569   # -77 indicates other
summary(hh_bb1$as.numeric(hh_10_other)[hh_bb1$hh_10 == -77], basic = T)
# Result:
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#-77.000   1.000   1.000   2.345   1.000  16.000    1569   # -77 indicates other
summary(as.numeric(hh_bb1$hh_10_other)[hh_bb1$hh_10 == -77], basic = T)
# 3. Income
summary(hh_bb1$hh_10a)
# 3. Income
table(hh_bb1$hh_10a)
# Result:
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# -88   30000   60000  128711  144000 1200000    3030
summary(hh_bb1$hh_10a_alert[hh_bb1$hh_10a > 100000])
# Result:
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# 1       1       1       1       1       1    3030
table(hh_bb1$hh_10a_alert[hh_bb1$hh_10a > 100000])
# Result:
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# 1       1       1       1       1       1    3030
summary(hh_bb1$hh_10a_alert[hh_bb1$hh_10a < 100000]) # how many are
# 4. Primary Activity from September to February
summar(hh_bb1$hh_10_18a)
# 4. Primary Activity from September to February
summary(hh_bb1$hh_10_18a)
# Result:
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
# -77.000   1.000   1.000   2.302   1.000  16.000    1569
summary(hh_bb1$hh_10_18a_other[hh_bb1$bb_10a_18a == -77])
# 5. Income September to February
summary(hh_bb1$hh_10_18A)
grp <- c("hh_10", "hh_10_other", "hh_10a", "hh_10a_alert", "hh_10_18a", "hh_10_18a_other", "hh_10_18A")
summary(hh_bb1[grp])
summary(hh_bb1$[grp])
summary(hh_bb1[grp])
for i in grp:
print(summary(hh_bb1$i))
for i in grp:
print(summary(hh_bb1$i))
for i in grp {print(summary(hh_bb1$i))}
for (i in grp) {
print(summary(hh_bb1$i))
}
# For labor age >= 16
hh_bb1 <- as.data.frame(hh_bb1)
summary(hh_bb1[grp])
summary(hh_bb1[grp][hh_bb1$hh_07 < 16])
summary((hh_bb1[grp])[hh_bb1$hh_07 < 16])
summary(hh_bb1[grp[hh_bb1$hh_07 < 16]])
summary(hh_bb1[grp])[hh_bb1$hh_07 < 16]
for (i in grp) {
summary(hh_bb1[i])[hh_bb1$hh_07 < 16]
}
for (i in grp) {
summary(hh_bb1[i])
}
for (i in grp) {
print(summary(hh_bb1[i]))
}
for (i in grp) {
print(summary(hh_bb1[i])[hh_bb1$hh_07 < 16])
}
for (i in grp) {
for (i in grp) {
print(summary(hh_bb1$i[hh_bb1$hh_07 < 16]))
}
hh_bb1[grp] %>%
summarise_if(hh_bb1$hh_07 < 16)
summary(hh_bb1[grp]，[hh_bb1$hh_07 < 16])
summary(hh_bb1[grp],[hh_bb1$hh_07 < 16])
summary(hh_bb1[grp] [hh_bb1$hh_07 < 16])
summary(hh_bb1[grp], hh_bb1$hh_07 < 16)
# 2. Primary Activity (income source)
summary(hh_bb1$hh_10[hh_bb1$hh_07 < 16])
